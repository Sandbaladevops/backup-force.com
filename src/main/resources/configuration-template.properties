# This is a configuration template for backup-force.com utility
# sections - lists all sections in the order they shall be requested during interactive config
# <sectionname>.list = ordered list of config keys
# <sectionname>.required - if true then each parameter in the section is required
# <sectionname>.header - header displayed for each section
# <sectionname>.description - detailed description for each section
# <sectionname>.<key>.description - description of a specific key
# <key> = example value

sections = intro, output, sfdc, proxy, objects, finalNotes
output.list = outputFolder
sfdc.list = sf.username, sf.password, sf.serverurl
proxy.list = http.proxyHost, http.proxyPort, http.proxyUsername, http.proxyPassword, http.ntlmDomain
objects.list = backup.objects

intro.header = Interactive configuration
intro.description = Next step will allow you to enter some base configuration parameters. \n\
  The list of parameters is not exhaustive and it is recommended that once you've generated initial \
  config you will make all further changes by modifying the config file directly using your favourite \
  text editor.\n\
  Complete list of available options and their descriptions can be found in the example configuration \
  file:\n\
  \ https://github.com/neowit/backup-force.com/blob/master/config/sample-configuration.properties

# Data will be extracted in the folder defined by outputFolder key
output.header = Output folder location
output.outputFolder.description = Data will be extracted in the folder defined by outputFolder key \n\
\ Please specify full path to the output folder \n\
\ Example 1 (MS Windows): c:/extract \n\
\ Example 2 (Linux): /home/user/extract \n\

output.required = true
# Unix
#outputFolder=/full/path/to/backup/folder/`date +%Y%m%d-%H%M`

# Windows (using date.exe from UnixUtils: http://sourceforge.net/projects/unxutils/files/)
# assuming date.exe is available in %PATH% or present in the current directory
#outputFolder=/full/path/to/backup/folder/`date.exe +%Y%m%d-%H%M`

output.lastRunOutputFile.description = for incremental backups you need to specify lastRunOutputFile parameter \n\
\ Example 1 (MS Windows): c:/extract/lastRun.properties \
\ Example 2 (Linux): /home/user/extract/lastRun.properties

#lastRunOutputFile=/full/path/to/lastRun.properties


# =========================================
# Connection details
#
# All parameters listed in this section (i.e. with prefix sf. and http.) can also be specified in --credentials config
# Specify the login credentials for the desired Salesforce organisation
sfdc.required = true
sfdc.header = Connection Details
sfdc.description = Enter the login credentials for the desired Salesforce organisation

sfdc.sf.username = name@company.com
sfdc.sf.password = password-and-token

# uncomment for Production Orgs
#sf.serverurl = https://login.salesforce.com
# uncomment for Sandbox Orgs
#sf.serverurl = https://test.salesforce.com
sfdc.sf.serverurl.description = Server URL - use https://login.salesforce.com for Production orgs \
use https://test.salesforce.com for Sandbox Orgs

proxy.http.description = if you connection requires Proxy server please specify them now
# The host name of the proxy server, if applicable.
proxy.http.proxyHost=http://myproxy.internal.company.com

# The proxy server port.
proxy.http.proxyPort=8080

proxy.http.proxyUsername=
proxy.http.proxyPassword=

# The name of the Windows domain used for NTLM authentication.
proxy.http.ntlmDomain=

# The number of seconds to wait for a connection during API calls.
http.connectionTimeoutSecs=60

# Specify how many seconds the backup-force.com utility waits to receive a 
# response back from the server before returning an error for the request
http.readTimeoutSecs=540

# =========================================
# You can specify selected or ALL object types

objects.required = true
objects.header = Backup/Retrieve objects
objects.backup.objects.description = You can specify a coma separated object list (e.g. Account, Contact, Project__c) \
or a wildcard * to cover all objects in the Org

# selected types
#backup.objects=Account, Contact

# or use * to specify ALL object types
objects.backup.objects=*

# =========================================
# You can set a specific per-object query using backup.soql.<ObjectName> key 
# and/or global WHERE (for all other objects) using backup.global.where key

# example 1: select Id and Name field from Account and limit to 10 records
#backup.soql.Account=select Id, Name from Account limit 10

# example 2: Select all fields from Contact where last modified date is this year
#backup.soql.Account=select * from Contact where LastModifiedDate = $Object.LastModifiedDate

# =========================================
# Global where clause is applied to all objects that do not have backup.soql.<ObjectName> property
# be careful because not all objects may support fields you use in global.where

# example 1: extract all records with LastModifiedDate >= 'date of last retrieval', i.e. Incremental extract
#backup.global.where=LastModifiedDate >= $Object.LastModifiedDate

# example 2: extract objects created this year
#backup.global.where=CreatedDate >= THIS_YEAR

# =========================================
# if files (Attachment, Document) should be saved as real files as well as .csv then use backup.extract.file 
# available values: $id, $name, $ext
#backup.extract.file=$name-$id.$ext

# =========================================
## Post and pre-process scripts
# there are currently 2 hooks which can be configured to call user scripts (any shell script)
# Each script will receive a number of command line parameters as outlined below
#
# Example: assume I have written a script which zips results and deletes original .csv files to conserve drive space
# I could define my hook like this:
#	hook.global.after=/home/user/zip_and_move.sh
# or in windows environment
#	hook.global.after=c:/zip_and_move.cmd
#
# this script will be called when the process ends like this
#	c:/zip_and_move.cmd c:/process/output/folder c:/lastrun.properties

# hook.global.before - script run before process starts
# params: 
# - full path to output folder
# - full path to lastRunOutputFile
#hook.global.before=/full/path/to/script

# hook.global.after=script run after process completed
# params: 
# - full path to output folder
# - full path to lastRunOutputFile
#
#hook.global.after=/full/path/to/script

# hook.each.before=script run before each Object process starts
# params: 
# - full path to output folder
# - full path to lastRunOutputFile
# - Object type name
# - full path to <objecttype>.csv which will be created
#
#hook.each.before=/full/path/to/script

# hook.each.after=script run after Each Object process is completed
# params: 
# - full path to output folder
# - full path to lastRunOutputFile
# - Object type name
# - full path to generated <objecttype>.csv
# - number of saved records 
#
#hook.each.after=/full/path/to/script
